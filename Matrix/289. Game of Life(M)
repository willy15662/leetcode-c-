//複製一個array把每個點的鄰居數一遍判斷存活

class Solution {
private:
    int check(vector<vector<int>>& board, int row, int col){
        int max_row = board.size();
        int max_col = board[0].size();
        int live_count = 0;
        for(int i=row-1;i<=row+1;i++){
            for(int j=col-1;j<=col+1;j++){
                if(i==row && j==col)
                    continue;
                if(i<0 || i>=max_row || j<0 || j>=max_col)
                    continue;
                if(board[i][j] == 1)
                    live_count++;
            }
        }
        if(board[row][col] == 1){
            if(live_count < 2 || live_count>3)
                return 0;
            return 1;
        }
        else{
            if(live_count == 3)
                return 1;
        }
        return 0;
    }
public:
    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>> temp = board;
        int max_row = board.size();
        int max_col = board[0].size();
        for(int i=0; i<max_row;i++){
            for(int j=0; j<max_col;j++){
                board[i][j] = check(temp, i,j);
            }
        }
    }
};

/*
// bit解法
void gameOfLife(vector<vector<int>>& board) {
    int m = board.size(), n = m ? board[0].size() : 0;
    for (int i=0; i<m; ++i) {
        for (int j=0; j<n; ++j) {
            int count = 0;
            for (int I=max(i-1, 0); I<min(i+2, m); ++I)
                for (int J=max(j-1, 0); J<min(j+2, n); ++J)
                    count += board[I][J] & 1;    // 只看最低位的bit
            if (count == 3 || count - board[i][j] == 3)
                board[i][j] |= 2;     // 做or運算  代表活
        }
    }
    for (int i=0; i<m; ++i)
        for (int j=0; j<n; ++j)
            board[i][j] >>= 1;  //將未來狀態轉為現在狀態
}
*/
